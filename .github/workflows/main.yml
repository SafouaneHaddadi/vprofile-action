name: vprofile actions

on: workflow_dispatch #permet d'exécuter ce workflow manuellement
#on: 
 # push: 
  #  branches:
   #   - main 
env:
  AWS_REGION: us-east-1 
  ECR_REPOSITORY: vprofileapp 
  EKS_CLUSTER: vprofile-eks 

jobs:
  Testing: 
    runs-on: ubuntu-latest 

    steps: 
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Maven test
        run: mvn test 

      - name: Checkstyle
        run: mvn checkstyle:checkstyle 

      # config de Java 11 comme version par défaut (exigence de sonar-scanner à partir de la version 5.x)
      - name: Set Java 11
        uses: actions/setup-java@v3
        with:
         distribution: 'temurin' 
         java-version: '11' 

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7 

      - name: SonarQube Scan
      #url de Sonar
      #token d'authenthif pr SonarQube
      #organisation
      #chemin vers les sources du projet
      #chemin vers les rapports JUnit
      #    vers le rapport JaCoCo
      #    vers le rapport CheckStyle
      #    vers les fichiers binaires
        run: sonar-scanner
           -Dsonar.host.url=${{ secrets.SONAR_URL }} 
           -Dsonar.login=${{ secrets.SONAR_TOKEN }} 
           -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} 
           -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} 
           -Dsonar.sources=src/ 
           -Dsonar.junit.reportsPath=target/surefire-reports/ 
           -Dsonar.jacoco.reportsPath=target/jacoco.exec 
           -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml 
           -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ 

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }} 
          DEBUG: true 

  BUILD_AND_PUBLISH:   
    needs: Testing # ce job ne s'exécutera que si 'Testing' réussit
    runs-on: ubuntu-latest 
    steps:
      - name: Code checkout
        uses: actions/checkout@v4 

      - name: Build & Upload image to ECR
        uses: appleboy/docker-ecr-action@master 
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          registry: ${{ secrets.REGISTRY }} 
          repo: ${{ env.ECR_REPOSITORY }} 
          region: ${{ env.AWS_REGION }} 
          tags: latest,${{ github.run_number }} 
          daemon_off: false 
          dockerfile: ./Dockerfile 
          context: ./ # contexte de construction Docker, ici c'est le répertoire racine du projet

  DeployToEKS:
    needs: BUILD_AND_PUBLISH # cette étape dépend de l'étape précédente BUILD_AND_PUBLISH
    runs-on: ubuntu-latest 

    steps:
      - name: Code checkout
        uses: actions/checkout@v4 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1 
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ env.AWS_REGION }} 

    #pour permettre à kubectl de communiquer avec le cluster EKS spécifié. 
      - name: Get Kube config file 
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }} # Met à jour le fichier de configuration Kubernetes pour interagir avec le cluster EKS

     # - name: Print config file
      #  run: cat ~/.kube/config # affiche le contenu du fichier de configuration Kubernetes pour vérifier que la config a été màj correctement

      - name: Login to ECR
        run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS  --docker-password=$(aws ecr get-login-password) 
        # crée un secret k8s pour se connecter à ECR 
        # ce secret contient les info d'identification nécessaires pour se co à ECR
        # la cmd aws ecr get-login-password récupère un mdp temp° pour l'authent° auprès d'ECR. Cela permet à k8s de pull l'image lors du déploiement

      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.8 
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ env.AWS_REGION }} 
          cluster-name: ${{ env.EKS_CLUSTER }} 
          # config-files: .github/values/dev.yaml 
          chart-path: helm/vprofilecharts # chemin vers le chart qui contient la définition de notre app
          namespace: default # Namespace Kubernetes dans lequel l'appli sera déployée
          values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }} 
          name: vprofile-stack # nom de la release Helm. Permet de gérer et de suivre les déploiements plus facilement
